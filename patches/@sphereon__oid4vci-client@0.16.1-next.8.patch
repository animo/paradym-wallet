diff --git a/dist/AccessTokenClient.js b/dist/AccessTokenClient.js
index 3d3c60588bacb6dcfa5b6d190ab0f7645e153094..2345ec01446abc73d1f5aa2ecbef6687d9d1fd07 100644
--- a/dist/AccessTokenClient.js
+++ b/dist/AccessTokenClient.js
@@ -21,7 +21,7 @@ class AccessTokenClient {
     acquireAccessToken(opts) {
         return __awaiter(this, void 0, void 0, function* () {
             var _a;
-            const { asOpts, pin, codeVerifier, code, redirectUri, metadata, createDPoPOpts } = opts;
+            const { asOpts, pin, codeVerifier, code, redirectUri, metadata, createDPoPOpts, customBody } = opts;
             const credentialOffer = opts.credentialOffer ? yield (0, oid4vci_common_1.assertedUniformCredentialOffer)(opts.credentialOffer) : undefined;
             const pinMetadata = credentialOffer && this.getPinMetadata(credentialOffer.credential_offer);
             const issuer = (_a = opts.credentialIssuer) !== null && _a !== void 0 ? _a : (credentialOffer ? (0, oid4vci_common_1.getIssuerFromCredentialOfferPayload)(credentialOffer.credential_offer) : metadata === null || metadata === void 0 ? void 0 : metadata.issuer);
@@ -43,6 +43,7 @@ class AccessTokenClient {
                     metadata,
                     additionalParams: opts.additionalParams,
                     pinMetadata,
+                    customBody,
                 }),
                 pinMetadata,
                 metadata,
@@ -53,8 +54,7 @@ class AccessTokenClient {
         });
     }
     acquireAccessTokenUsingRequest(_a) {
-        return __awaiter(this, arguments, void 0, function* ({ accessTokenRequest, pinMetadata, metadata, asOpts, issuerOpts, createDPoPOpts, }) {
-            this.validate(accessTokenRequest, pinMetadata);
+        return __awaiter(this, arguments, void 0, function* ({ accessTokenRequest, metadata, asOpts, issuerOpts, createDPoPOpts, }) {
             const requestTokenURL = AccessTokenClient.determineTokenURL({
                 asOpts,
                 issuerOpts,
@@ -85,7 +85,7 @@ class AccessTokenClient {
     createAccessTokenRequest(opts) {
         return __awaiter(this, void 0, void 0, function* () {
             var _a, _b, _c, _d, _e, _f, _g;
-            const { asOpts, pin, codeVerifier, code, redirectUri } = opts;
+            const { asOpts, pin, codeVerifier, code, redirectUri, customBody} = opts;
             // eslint-disable-next-line @typescript-eslint/ban-ts-comment
             // @ts-ignore
             const credentialOfferRequest = opts.credentialOffer ? yield (0, oid4vci_common_1.toUniformCredentialOfferRequest)(opts.credentialOffer) : undefined;
@@ -95,6 +95,9 @@ class AccessTokenClient {
             }
             const credentialIssuer = (_d = (_b = opts.credentialIssuer) !== null && _b !== void 0 ? _b : (_c = credentialOfferRequest === null || credentialOfferRequest === void 0 ? void 0 : credentialOfferRequest.credential_offer) === null || _c === void 0 ? void 0 : _c.credential_issuer) !== null && _d !== void 0 ? _d : (_e = opts.metadata) === null || _e === void 0 ? void 0 : _e.issuer;
             yield (0, functions_1.createJwtBearerClientAssertion)(request, Object.assign(Object.assign({}, opts), { credentialIssuer }));
+            if(customBody !== null && customBody !== void 0) {
+              return customBody
+            } else {
             if (credentialOfferRequest === null || credentialOfferRequest === void 0 ? void 0 : credentialOfferRequest.supportedFlows.includes(oid4vci_common_1.AuthzFlowType.PRE_AUTHORIZED_CODE_FLOW)) {
                 this.assertAlphanumericPin(opts.pinMetadata, pin);
                 request.user_pin = pin;
@@ -113,6 +116,7 @@ class AccessTokenClient {
                 }
                 return request;
             }
+            }
             throw new Error('Credential offer request follows neither pre-authorized code nor authorization code flow requirements.');
         });
     }
diff --git a/dist/AuthorizationCodeClient.js b/dist/AuthorizationCodeClient.js
index f992ebc23b05994afffb5fee9b5b24b7ee0001d7..61ebf18dfca67eba65529bde21223e376db7fbad 100644
--- a/dist/AuthorizationCodeClient.js
+++ b/dist/AuthorizationCodeClient.js
@@ -70,7 +70,7 @@ function filterSupportedCredentials(credentialOffer, credentialsSupported) {
         return Object.assign(Object.assign({}, entry[1]), { configuration_id: entry[0] });
     });
 }
-const createAuthorizationRequestUrl = (_a) => __awaiter(void 0, [_a], void 0, function* ({ pkce, endpointMetadata, authorizationRequest, credentialOffer, credentialConfigurationSupported, clientId, version, }) {
+const createAuthorizationRequestUrl = (_a) => __awaiter(void 0, [_a], void 0, function* ({ pkce, endpointMetadata, authorizationRequest, credentialOffer, credentialConfigurationSupported, clientId, version, headers }) {
     var _b, _c, _d, _e;
     function removeDisplayAndValueTypes(obj) {
         const newObj = Object.assign({}, obj);
@@ -149,7 +149,7 @@ const createAuthorizationRequestUrl = (_a) => __awaiter(void 0, [_a], void 0, fu
         const parResponse = yield (0, oid4vci_common_1.formPost)(parEndpoint, (0, oid4vci_common_1.convertJsonToURI)(queryObj, {
             mode: oid4vci_common_1.JsonURIMode.X_FORM_WWW_URLENCODED,
             uriTypeProperties: ['client_id', 'request_uri', 'redirect_uri', 'scope', 'authorization_details', 'issuer_state'],
-        }), { contentType: 'application/x-www-form-urlencoded', accept: 'application/json' });
+        }), { contentType: 'application/x-www-form-urlencoded', accept: 'application/json', customHeaders: headers === null || headers === void 0 ? void 0 : headers });
         if (parResponse.errorBody || !parResponse.successBody) {
             if (parMode === oid4vci_common_1.PARMode.REQUIRE) {
                 throw Error(`PAR error: ${parResponse.origResponse.statusText}`);
diff --git a/dist/CredentialRequestClient.js b/dist/CredentialRequestClient.js
index 841c06e68175a156e28533c99dc8e04876ac630f..0989a955d55c045cf9a691fd2408649b84afc7cc 100644
--- a/dist/CredentialRequestClient.js
+++ b/dist/CredentialRequestClient.js
@@ -53,7 +53,7 @@ class CredentialRequestClient {
     }
     acquireCredentialsUsingProof(opts) {
         return __awaiter(this, void 0, void 0, function* () {
-            const { credentialIdentifier, credentialTypes, proofInput, format, context, subjectIssuance } = opts;
+            const { credentialIdentifier, credentialTypes, proofInput, format, context, subjectIssuance, additionalRequestClaims, customBody } = opts;
             const request = yield this.createCredentialRequest({
                 proofInput,
                 credentialTypes,
@@ -62,11 +62,12 @@ class CredentialRequestClient {
                 version: this.version(),
                 credentialIdentifier,
                 subjectIssuance,
+                additionalRequestClaims
             });
-            return yield this.acquireCredentialsUsingRequest(request, opts.createDPoPOpts);
+            return yield this.acquireCredentialsUsingRequest(request, opts.createDPoPOpts, customBody);
         });
     }
-    acquireCredentialsUsingRequest(uniformRequest, createDPoPOpts) {
+    acquireCredentialsUsingRequest(uniformRequest, createDPoPOpts, customBody) {
         return __awaiter(this, void 0, void 0, function* () {
             var _a, _b;
             if (this.version() < oid4vci_common_1.OpenId4VCIVersion.VER_1_0_13) {
@@ -82,13 +83,13 @@ class CredentialRequestClient {
             debug(`request\n: ${JSON.stringify(request, null, 2)}`);
             const requestToken = this.credentialRequestOpts.token;
             let dPoP = createDPoPOpts ? yield (0, oid4vc_common_1.createDPoP)((0, oid4vc_common_1.getCreateDPoPOptions)(createDPoPOpts, credentialEndpoint, { accessToken: requestToken })) : undefined;
-            let response = (yield (0, oid4vci_common_1.post)(credentialEndpoint, JSON.stringify(request), Object.assign({ bearerToken: requestToken }, (dPoP && { customHeaders: { dpop: dPoP } }))));
+            let response = (yield (0, oid4vci_common_1.post)(credentialEndpoint, JSON.stringify(customBody === null || customBody === void 0 ?  request : customBody), Object.assign({ bearerToken: requestToken }, (dPoP && { customHeaders: { dpop: dPoP } }))));
             let nextDPoPNonce = createDPoPOpts === null || createDPoPOpts === void 0 ? void 0 : createDPoPOpts.jwtPayloadProps.nonce;
             const retryWithNonce = (0, dpopUtil_1.shouldRetryResourceRequestWithDPoPNonce)(response);
             if (retryWithNonce.ok && createDPoPOpts) {
                 createDPoPOpts.jwtPayloadProps.nonce = retryWithNonce.dpopNonce;
                 dPoP = yield (0, oid4vc_common_1.createDPoP)((0, oid4vc_common_1.getCreateDPoPOptions)(createDPoPOpts, credentialEndpoint, { accessToken: requestToken }));
-                response = (yield (0, oid4vci_common_1.post)(credentialEndpoint, JSON.stringify(request), Object.assign({ bearerToken: requestToken }, (createDPoPOpts && { customHeaders: { dpop: dPoP } }))));
+                response = (yield (0, oid4vci_common_1.post)(credentialEndpoint, JSON.stringify(customBody === null || customBody === void 0 ?  request : customBody), Object.assign({ bearerToken: requestToken }, (createDPoPOpts && { customHeaders: { dpop: dPoP } }))));
                 const successDPoPNonce = response.origResponse.headers.get('DPoP-Nonce');
                 nextDPoPNonce = successDPoPNonce !== null && successDPoPNonce !== void 0 ? successDPoPNonce : retryWithNonce.dpopNonce;
             }
@@ -131,7 +132,7 @@ class CredentialRequestClient {
     createCredentialRequest(opts) {
         return __awaiter(this, void 0, void 0, function* () {
             var _a;
-            const { proofInput, credentialIdentifier: credential_identifier } = opts;
+            const { proofInput, credentialIdentifier: credential_identifier, additionalRequestClaims } = opts;
             const proof = yield buildProof(proofInput, opts);
             if (credential_identifier) {
                 if (opts.format || opts.credentialTypes || opts.context) {
@@ -142,11 +143,10 @@ class CredentialRequestClient {
                     proof,
                 };
             }
-            const formatSelection = (_a = opts.format) !== null && _a !== void 0 ? _a : this.credentialRequestOpts.format;
-            if (!formatSelection) {
-                throw Error(`Format of credential to be issued is missing`);
-            }
-            const format = (0, oid4vci_common_1.getUniformFormat)(formatSelection);
+            const format = (_a = opts.format) !== null && _a !== void 0 ? _a : this.credentialRequestOpts.format;
+            if (!format) {
+                 throw Error(`Format of credential to be issued is missing`);
+             }
             const typesSelection = (opts === null || opts === void 0 ? void 0 : opts.credentialTypes) && (typeof opts.credentialTypes === 'string' || opts.credentialTypes.length > 0)
                 ? opts.credentialTypes
                 : this.credentialRequestOpts.credentialTypes;
@@ -158,7 +158,12 @@ class CredentialRequestClient {
                 throw Error(`Credential type(s) need to be provided`);
             }
             // TODO: we should move format specific logic
-            if (format === 'jwt_vc_json' || format === 'jwt_vc') {
+            if(format === 'seed_credential') {
+              return Object.assign(additionalRequestClaims, {
+                format,
+                proof
+              })
+            } else if (format === 'jwt_vc_json' || format === 'jwt_vc') {
                 return Object.assign({ credential_definition: {
                         type: types,
                     }, format,
diff --git a/dist/OpenID4VCIClientV1_0_13.js b/dist/OpenID4VCIClientV1_0_13.js
index fa81f1009155b1286138415e6aa4a8a2716b4c87..8da711c4ef01422a07219c4f734c7e6aeda22386 100644
--- a/dist/OpenID4VCIClientV1_0_13.js
+++ b/dist/OpenID4VCIClientV1_0_13.js
@@ -128,6 +128,7 @@ class OpenID4VCIClientV1_0_13 {
                     credentialOffer: this.credentialOffer,
                     credentialConfigurationSupported: this.getCredentialsSupported(),
                     version: this.version(),
+                    headers: opts === null || opts === void 0 ? void 0 : opts.headers
                 });
             }
             return this._state.authorizationURL;
