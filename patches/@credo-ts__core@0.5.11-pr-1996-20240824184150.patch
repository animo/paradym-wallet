diff --git a/build/modules/sd-jwt-vc/SdJwtVcService.js b/build/modules/sd-jwt-vc/SdJwtVcService.js
index add911d9570edcad9945c4819bfc56cf6f715201..89506a3cb0301c3474b2c5ddd0fd4b33567449ef 100644
--- a/build/modules/sd-jwt-vc/SdJwtVcService.js
+++ b/build/modules/sd-jwt-vc/SdJwtVcService.js
@@ -112,7 +112,7 @@ let SdJwtVcService = class SdJwtVcService {
             throw new SdJwtVcError_1.SdJwtVcError(`The 'iss' claim in the payload does not match a 'SAN-URI' name and the domain extracted from the HTTPS URI does not match a 'SAN-DNS' name in the x5c certificate.`);
         }
     }
-    async verify(agentContext, { compactSdJwtVc, keyBinding, requiredClaimKeys }) {
+    async verify(agentContext, { compactSdJwtVc, keyBinding, requiredClaimKeys, httpX509Certificate }) {
         const sdjwt = new sd_jwt_vc_1.SDJwtVcInstance(this.getBaseSdJwtConfig(agentContext));
         const verificationResult = {
             isValid: false,
@@ -138,7 +138,7 @@ let SdJwtVcService = class SdJwtVcService {
         };
         try {
             const credentialIssuer = await this.parseIssuerFromCredential(agentContext, sdJwtVc);
-            const issuer = await this.extractKeyFromIssuer(agentContext, credentialIssuer);
+            const issuer = await this.extractKeyFromIssuer(agentContext, credentialIssuer, httpX509Certificate);
             const holderBinding = this.parseHolderBindingFromCredential(sdJwtVc);
             const holder = holderBinding ? await this.extractKeyFromHolderBinding(agentContext, holderBinding) : undefined;
             sdjwt.config({
@@ -273,7 +273,16 @@ let SdJwtVcService = class SdJwtVcService {
             });
         };
     }
-    async extractKeyFromIssuer(agentContext, issuer) {
+    async extractKeyFromIssuer(agentContext, issuer, certificate) {
+        if(issuer.method === 'http') {
+          if(certificate === null || certificate === void 0) {
+            throw new SdJwtVcError_1.SdJwtVcError('Certificate was not included while http was used as iss')
+          }
+          const cert = X509Service_1.X509Service.parseCertificate(agentContext,{encodedCertificate: certificate})
+          return {
+            key: cert.key
+          }
+        }
         if (issuer.method === 'did') {
             const parsedDid = (0, dids_1.parseDid)(issuer.didUrl);
             if (!parsedDid.fragment) {
@@ -373,6 +382,12 @@ let SdJwtVcService = class SdJwtVcService {
                 didUrl,
             };
         }
+        if(iss.startsWith('https:')) {
+          return { 
+            method: 'http'
+          }
+
+        }
         throw new SdJwtVcError_1.SdJwtVcError("Unsupported 'iss' value. Only did is supported at the moment.");
     }
     parseHolderBindingFromCredential(sdJwtVc) {
