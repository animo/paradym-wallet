diff --git a/build/modules/vc/models/credential/W3cCredential.js b/build/modules/vc/models/credential/W3cCredential.js
index 0c03676b24f394c7b48e9b41d8101a576c94484b..d5b1ff8847721223e5bb486eb4716d790a849013 100644
--- a/build/modules/vc/models/credential/W3cCredential.js
+++ b/build/modules/vc/models/credential/W3cCredential.js
@@ -68,16 +68,37 @@ class W3cCredential {
         return utils_1.JsonTransformer.fromJSON(json, W3cCredential);
     }
 }
-__decorate([
-    (0, class_transformer_1.Expose)({ name: '@context' }),
+__decorate(
+  [
+    (0, class_transformer_1.Expose)({ name: "@context" }),
     (0, validators_2.IsCredentialJsonLdContext)(),
-    __metadata("design:type", Array)
-], W3cCredential.prototype, "context", void 0);
-__decorate([
+    // FIXME: credentials issued by MATTR in JWT format use a string value for the @context
+    // The spec requires it to be an array.
+    // See: https://jfflabs.slack.com/archives/C05FTNY6GH2/p1695650296840639?thread_ts=1695648357.864189&cid=C05FTNY6GH2
+    (0, class_transformer_1.Transform)(({ type, value }) => {
+      if (type !== class_transformer_1.TransformationType.PLAIN_TO_CLASS)
+        return value;
+      if (Array.isArray(value)) return value;
+      if (typeof value === "string") return [value];
+    }),
+    __metadata("design:type", Array),
+  ],
+  W3cCredential.prototype,
+  "context",
+  void 0
+);
+__decorate(
+  [
     (0, class_validator_1.IsOptional)(),
-    (0, validators_1.IsUri)(),
-    __metadata("design:type", String)
-], W3cCredential.prototype, "id", void 0);
+    // FIXME: credential issued by MATTR launchpad uses an UUID as the `jti`, which is not a valid URI
+    // See: https://jfflabs.slack.com/archives/C05FTNY6GH2/p1695648357864189
+    // (0, validators_1.IsUri)(),
+    __metadata("design:type", String),
+  ],
+  W3cCredential.prototype,
+  "id",
+  void 0
+);
 __decorate([
     IsCredentialType(),
     __metadata("design:type", Array)
